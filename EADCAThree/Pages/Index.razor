@page "/"
@inject HttpClient Http
@using Blazored.Typeahead;
@using System.Linq;
@using System.Text.RegularExpressions;




<h1>News Articles</h1>

@if (this.typeSearch == null)
{
    <p>Please select a way to search news and click the search button</p>
}

<div>
    <label for="typeSearch">Choose a search type: </label>
    <select id="typeSearch" name="typeSearch" @bind="typeSearch">
        <option value="">Please select a type of search</option>
        <option value="headLines"> By top headlines in a Country</option>
        <option value="everyThing">By topic</option>
    </select>

    <!-- If the user selected top headlines in a country, it will go in here -->
    @if (this.typeSearch == "headLines")
    {
        <br />
        <p>Note : Please be aware that the news will be in the selected country language</p>
        <label for="countrySearch">Choose a country: </label>
        <select id="countrySearch" name="countrySearch" @bind="countryISO">
            <option value="noCountrySelected">Please select a country</option>
            <!-- I have this because if I dont the first value of the array
                will show in the dropdown and if the user clicks search it will do a random search
                and not for the value displayed in the dropdown-->
            <!-- loops through the values of the 2D array, and after a user selects it, it populates the countryISO var -->
            @for (int i = 0; i < this.countryCode.GetLength(0); i++)
            {
                <option value="@countryCode[i,1]">@countryCode[i, 0]</option>

            }
        </select>
        <br />

        <label for="category">Choose a category: </label>
        <select id="category" name="category" @bind="category">
            <option value="noCatSelected">Please select a category</option>
            <!-- Loops through the category arrays and after a user selects it  -->
            @for (int y = 0; y < this.countryCategorys.Length; y++)
            {
                <option value="@this.countryCategorys.ElementAt(y)">@this.countryCategorys.ElementAt(y)</option>
            }
        </select>
        <button @onclick="searchNews">Search</button>
        <br/><br/>
        @if(this.countrySelected == false)
        {
            <p>No country has been selected</p>
        }
        @if(this.categorySelected == false)
        {
            <p>No category has been selected</p>
        }

    }
</div>



<!-- if the user selectes everything on a topic, it will go into here -->
@if (this.typeSearch == "everyThing")
{
    <div>
        <label for="newsTopic">Topic : </label>
        <input id="newsTopic" @bind="newsTopic" />
        <button id="newsTopic" @onclick="searchNews">Search</button>

        @if (this.nullStringTopic == true || this.newsTopic == "" || this.specialChar == true)
        {
            <p>The search string is empty or it contains a special character.</p>
        }

        @if (this.nullStringTopic != true || this.newsTopic != "" || this.specialChar != true)
        {
            <p>Happy Searching</p>
        }


        <p></p>
    </div>
}








@if (this.found == false)
{
    <p><em>@this.errorMessage</em></p>
}
else
{

    <div class="row">
        @for (int i = 0; i < data.articles.Count; i++)
        {
            <div class="column">
                <div class="card">
                    <a href="@data.articles.ElementAt(i).url" target="_blank"><img src="@data.articles.ElementAt(i).urlToImage" alt="articleImage" style="width:100%" /></a>
                    <div class="container">
                        <!-- The code below is putting a hyper link in the news article Title, if the user clicks on it, it will open a new tab-->
                        <h4><b><a href="@data.articles.ElementAt(i).url" target="_blank">@data.articles.ElementAt(i).title</a></b></h4>
                        <p>@data.articles.ElementAt(i).description</p>
                    </div>

                </div>
            </div>
        }
    </div>



}

@code {

    // VARS
    //after the user selects the type of search he want, this var get a value
    private String typeSearch;
    bool topHeadLinesBool;
    private String countryISO = null;//country ISO will get its value from the 2D array and a user selected a value in the dropdown
    private String newsTopic;//The topic the user inputs
    private bool nullStringTopic = false;//if the newsTopic string is null
    private bool found;//= true when articles are found
    private bool specialChar;//if the newsTopic string contains a special char
    private Root data;
    //I have put a value here so it makes the user select the type of search he wants
    private string uri = "Please select a type search";//I made it private for security reason as api key is exposed
    private string errorMessage;
    private String category = null;//get a value from the countryCategorys var
    bool categorySelected;
    //This var stores all the possible categories that each country can search by
    string[] countryCategorys = { "business", "entertainment", "general", "health", "science", "sports", "technology" };
    bool countrySelected;
    //2D with the coutry name and its corresponding ISO code
    string[,] countryCode = new string[,] {
                    { "Ireland", "ie" },
                    {"United Kingdom","gb"},
                    {"Brazil","br" },
                    {"France","fr" },
                    {"Germany","de" },
                    {"Latvia","lv" },
                    {"Lithuania","lt" },
                    {"Netherlands","nl" },
                    {"Poland","pl" }
                            };

    //GET OR SET METHODS FOR UNIT TESTING PURPOSES
    //I made this method so i can set a value in the unit testing
    public void setTypeSearch(string inString)
    {
        this.typeSearch = inString;
    }

    //I made this so i could do some unit testing
    public bool TopHeadLinesBool()
    {
        return this.topHeadLinesBool;
    }


    public void setISO(string iso)//unit testing purposes
    {
        this.countryISO = iso;
    }
    public void setNewsTopic(string topic)//for unit testing purposes
    {
        this.newsTopic = topic;
    }

    public bool SpecialChar()
    {
        return this.specialChar;
    }

    public bool NullStringTopic()//Unit testing method
    {
        return this.nullStringTopic;
    }







    public void setCategory(string cat)
    {
        this.category = cat;
    }



    public async Task getNewsAsync()
    {
        try
        {
            if (this.typeSearch == "headLines")
            {
                this.uri = "https://newsapi.org/v2/top-headlines?country=" + this.countryISO + "&category=" + this.category + "&apiKey=882c6f02b8a944d999549162b5fd43d2";
                this.topHeadLinesBool = true;//unit testing purposes
            }

            if (this.typeSearch == "everyThing")
            {
                this.uri = "https://newsapi.org/v2/everything?q=" + this.newsTopic + "&language=en&apiKey=882c6f02b8a944d999549162b5fd43d2";
            }

            data = await Http.GetFromJsonAsync<Root>(uri);
            found = true;
            errorMessage = String.Empty;
        }

        catch (Exception e)
        {
            found = false;
        }
    }

    //Lifecycle method
    protected override async Task OnInitializedAsync()
    {
        await getNewsAsync();
    }

    //Searches for both method
    public async void searchNews()
    {


        if (this.typeSearch == "everyThing")
        {
            if (this.newsTopic != null)
            {
                Regex rx = new Regex(@"^[a-zA-Z0-9\s]+$");
                this.nullStringTopic = false;
                if (rx.IsMatch(this.newsTopic) == false)
                {
                    this.specialChar = true;

                }
                else
                {
                    this.specialChar = false;
                    await getNewsAsync();
                    StateHasChanged();
                }
            }
            else
            {
                this.nullStringTopic = true;
            }
        }
        else if (this.typeSearch == "headLines")
        {
            if (this.countryISO != "noCountrySelected" || this.countryISO == null)
            {
                this.countrySelected = true;
                if (this.category != "noCatSelected" || this.category == null)
                {
                    this.categorySelected = true;
                    await getNewsAsync();
                    StateHasChanged();
                }
                else
                {
                    this.categorySelected = false;
                }

            }
            else
            {
                this.countrySelected = false;
            }
        }
        else
        {
            //Nothing happens
        }

    }



    public class Source
    {
        public string id { get; set; }
        public string name { get; set; }
    }

    public class Article
    {
        public Source source { get; set; }
        public string author { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public string url { get; set; }
        public string urlToImage { get; set; }
        public DateTime publishedAt { get; set; }
        public string content { get; set; }
    }

    public class Root
    {
        public string status { get; set; }
        public int totalResults { get; set; }
        public List<Article> articles { get; set; }
    }









}


